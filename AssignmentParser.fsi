// Signature file for parser generated by fsyacc
module AssignmentParser
type token = 
  | ASSIGN
  | SEMICOLON
  | SKIP
  | LBRACKET
  | RBRACKET
  | BRACKETS
  | IF
  | FI
  | DO
  | OD
  | ASSERTS
  | SCOR
  | OR
  | SCAND
  | AND
  | EQ
  | LE
  | LEQ
  | GR
  | GEQ
  | NEQ
  | NOT
  | TRUE
  | FALSE
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | EOF
  | VAR of (String)
  | LISTNAME of (String)
  | NUM of (float)
type tokenId = 
    | TOKEN_ASSIGN
    | TOKEN_SEMICOLON
    | TOKEN_SKIP
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_BRACKETS
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_ASSERTS
    | TOKEN_SCOR
    | TOKEN_OR
    | TOKEN_SCAND
    | TOKEN_AND
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_LEQ
    | TOKEN_GR
    | TOKEN_GEQ
    | TOKEN_NEQ
    | TOKEN_NOT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_LISTNAME
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_guardedCommand
    | NONTERM_aExpr0
    | NONTERM_aExpr1
    | NONTERM_aExpr2
    | NONTERM_aExpr3
    | NONTERM_bExpr0
    | NONTERM_bExpr1
    | NONTERM_bExpr2
    | NONTERM_bExpr3
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (command) 
